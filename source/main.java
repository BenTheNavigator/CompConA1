import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException{

		System.out.println("Hello Worldd");
	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("Please give as input argument a filename\n");
	    System.exit(-1);
	}
	String filename="cc.txt";

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	ccLexer lex = new ccLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	ccParser parser = new ccParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	Double result=interpreter.visit(parseTree);
	System.out.println("The result is: "+result);
    }
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<String>
             implements ccVisitor<String> {


	@Override
	public Double visitStart(ccParser.StartContext ctx) {
		return 0.0;
	}

	@Override
	public String visitHardwareRes(ccParser.HardwareResContext ctx) {
		System.out.println("Hardware");
		return ctx.IDENT().getText();
	}

	@Override
	public Double visitInputsRes(ccParser.InputsResContext ctx) {
		return 0.0;
	}

	@Override
	public Double visitOutputsRes(ccParser.OutputsResContext ctx) {
		return 0.0;
	}

	@Override
	public Double visitLatchesRes(ccParser.LatchesResContext ctx) {
		return 0.0;
	}

	@Override
	public Double visitUpdatesRes(ccParser.UpdatesResContext ctx) {
		return 0.0;
	}

	@Override
	public Double visitDefRes(ccParser.DefResContext ctx) {
		return 0.0;
	}

	@Override
	public Double visitSimInputsRes(ccParser.SimInputsResContext ctx) {
		return 0.0;
	}

	@Override
	public Double visitSignalListRes(ccParser.SignalListResContext ctx) {
		return 0.0;
	}

	@Override
	public Double visitNOT(ccParser.NOTContext ctx) {
		return 0.0;
	}

	@Override
	public Double visitOR(ccParser.ORContext ctx) {
		return 0.0;
	}

	@Override
	public Double visitPARENTHESES(ccParser.PARENTHESESContext ctx) {
		return 0.0;
	}

	@Override
	public Double visitIDENT(ccParser.IDENTContext ctx) {
		return 0.0;
	}

	@Override
	public Double visitAND(ccParser.ANDContext ctx) {
		return 0.0;
	}

	@Override
	public Double visitFUNCTION(ccParser.FUNCTIONContext ctx) {
		return 0.0;
	}

	@Override
	public Double visitIDENTAPOSTROPHE(ccParser.IDENTAPOSTROPHEContext ctx) {
		return 0.0;
	}
}
